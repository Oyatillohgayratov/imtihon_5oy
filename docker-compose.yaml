services:
  user-service:
    build: ./user-service
    ports:
      - "50051:50051"
    networks:
      - mynetwork
    depends_on:
      - database

  hotel-service:
    build: ./hotel-service
    ports:
      - "50052:50052"
    networks:
      - mynetwork
    depends_on:
      - database

  booking-service:
    build: ./booking-service
    ports:
      - "50053:50053"
    networks:
      - mynetwork
    depends_on:
      - database
    env_file:
      - ./.env 

  notification-service:
    build: ./notifaction-service
    ports:
      - "50054:50054"
    networks:
      - mynetwork
    # depends_on:
    #   - kafka

  api-gateway-service:
    build: ./api-gateway
    container_name: api_gateway_container
    image: myapigateway_image
    ports:
      - "8080:8080"
    depends_on:
      - user-service
      - hotel-service
      - booking-service
      - notification-service
    networks:
      - mynetwork
    env_file:
      - ./.env 

  database:
    image: postgres
    environment:
      POSTGRES_DB: homework
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: azamat
    networks:
      - mynetwork
    volumes:
      - postgres_data:/var/lib/postgresql/data


  # kafka:
  #   image: wurstmeister/kafka:latest
  #   ports:
  #     - "9092:9092"
  #   environment:
  #     KAFKA_LISTENERS: INSIDE://0.0.0.0:9092
  #     KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #   networks:
  #     - mynetwork
  #   depends_on:
  #     - zookeeper

  # zookeeper:
  #   image: wurstmeister/zookeeper:latest
  #   ports:
  #     - "2181:2181"
  #   networks:
  #     - mynetwork

networks:
  mynetwork:
    driver: bridge

volumes:
  postgres_data:
